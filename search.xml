<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>a</title>
    <url>/2019/10/24/a/</url>
    <content><![CDATA[<p>kjklj<br>lkjkl</p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>在微博微信场景下学习Redis数据结构</title>
    <url>/2019/10/24/%E5%9C%A8%E5%BE%AE%E5%8D%9A%E5%BE%AE%E4%BF%A1%E5%9C%BA%E6%99%AF%E4%B8%8B%E5%AD%A6%E4%B9%A0Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h2 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下载地址：http://redis.io/download</span><br><span class="line"></span><br><span class="line">安装步骤：</span><br><span class="line">1、yum install gcc</span><br><span class="line">2、wget http://download.redis.io/releases/redis‐5.0.3.tar.gz</span><br><span class="line">tar xzf redis‐5.0.3.tar.gz</span><br><span class="line">cd redis‐5.0.3</span><br><span class="line">3、make</span><br><span class="line">4、src/redis‐server redis.conf（注意要使用后台启动，所以修改redis.conf里的daemonize改为y</span><br><span class="line">es)</span><br><span class="line">5、ps ‐ef | grep redis</span><br><span class="line">6、src/redis‐cli</span><br></pre></td></tr></table></figure>

<h2 id="Redis核心数据结构以及使用场景"><a href="#Redis核心数据结构以及使用场景" class="headerlink" title="Redis核心数据结构以及使用场景"></a>Redis核心数据结构以及使用场景</h2><p><img src="http://blog-image-xiaoqiang.test.upcdn.net/201910/1020-1.jpg" alt=""></p>
<h3 id="String结构"><a href="#String结构" class="headerlink" title="String结构"></a>String结构</h3><ul>
<li><p>字符串常用操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET  key  value 			//存入字符串键值对</span><br><span class="line">MSET  key  value [key value ...] 	//批量存储字符串键值对</span><br><span class="line">SETNX  key  value 		        //存入一个不存在的字符串键值对</span><br><span class="line">GET  key 			        //获取一个字符串键值</span><br><span class="line">MGET  key  [key ...]	 	//批量获取字符串键值</span><br><span class="line">DEL  key  [key ...] 		//删除一个键</span><br><span class="line">EXPIRE  key  seconds 		//设置一个键的过期时间(秒)</span><br></pre></td></tr></table></figure>
</li>
<li><p>原子加减</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INCR  key 			//将key中储存的数字值加1</span><br><span class="line">DECR  key 			//将key中储存的数字值减1</span><br><span class="line">INCRBY  key  increment 	//将key所储存的值加上increment</span><br><span class="line">DECRBY  key  decrement 	//将key所储存的值减去decrement</span><br></pre></td></tr></table></figure>
</li>
<li><p>String应用场景</p>
</li>
</ul>
<p><img src="http://blog-image-xiaoqiang.test.upcdn.net/201910/1020-2.jpg" alt=""></p>
<p>这个是微信公众号的文章阅读量数量的统计，可以通过redis的string数据结构来解决。使用incr原子操作命令，redis的key是article：readcount：{文章id}，当该文章被阅读时，调用incr命令，阅读数量加一，通过get该redis的key，实现文章阅读数量统计的功能。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">incr article：readcount：&#123;文章id&#125;</span><br><span class="line">get article：readcount：&#123;文章id&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Hash结构"><a href="#Hash结构" class="headerlink" title="Hash结构"></a>Hash结构</h3><ul>
<li>Hash常用操作<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HSET  key  field  value 			//存储一个哈希表key的键值</span><br><span class="line">HSETNX  key  field  value 		//存储一个不存在的哈希表key的键值</span><br><span class="line">HMSET  key  field  value [field value ...] 	//在一个哈希表key中存储多个键值对</span><br><span class="line">HGET  key  field 				//获取哈希表key对应的field键值</span><br><span class="line">HMGET  key  field  [field ...] 		//批量获取哈希表key中多个field键值</span><br><span class="line">HDEL  key  field  [field ...] 		//删除哈希表key中的field键值</span><br><span class="line">HLEN  key				//返回哈希表key中field的数量</span><br><span class="line">HGETALL  key				//返回哈希表key中所有的键值</span><br><span class="line">HINCRBY  key  field  increment 		//为哈希表key中field键的值加上增量increment</span><br></pre></td></tr></table></figure></li>
<li>Hash使用场景</li>
</ul>
<p><img src="http://blog-image-xiaoqiang.test.upcdn.net/201910/1020-3.jpg" alt=""></p>
<p>这个是京东购物车的截图，可以看到很多功能都用redis的命令可来实现。在redis中保存对商品id、购物车id等等id的操作，在前端保存对于该商品的描述，在操作购物车的时候，底层其实就是操作redis的命令。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">添加商品：hset cart:1001 1088 1</span><br><span class="line">添加数量：hincrby cart:1001 1088 1</span><br><span class="line">商品总数：hlen cart:1001</span><br><span class="line">删除商品：hdel cart:1001 1008</span><br><span class="line">获取购物车所有商品： hgetall cart:1001</span><br></pre></td></tr></table></figure>
<ul>
<li>Hash优缺点<br>优点：同类数据归类整合存储，方便数据管理，相比string操作消耗内存与cpu更小<br>缺点：过期功能上不能使用在field上，只能使用在key上</li>
</ul>
<h3 id="List结构"><a href="#List结构" class="headerlink" title="List结构"></a>List结构</h3><ul>
<li><p>List常用操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LPUSH  key  value [value ...] 		//将一个或多个值value插入到key列表的表头(最左边)</span><br><span class="line">RPUSH  key  value [value ...]	 	//将一个或多个值value插入到key列表的表尾(最右边)</span><br><span class="line">LPOP  key			//移除并返回key列表的头元素</span><br><span class="line">RPOP  key			//移除并返回key列表的尾元素</span><br><span class="line">LRANGE  key  start  stop		//返回列表key中指定区间内的元素，区间以偏移量start和stop指定</span><br><span class="line"></span><br><span class="line">BLPOP  key  [key ...]  timeout	//从key列表表头弹出一个元素，若列表中没有元素，阻塞等待，timeout秒,如果timeout=0,一直阻塞等待</span><br><span class="line">BRPOP  key  [key ...]  timeout 	//从key列表表尾弹出一个元素，若列表中没有元素，阻塞等待，timeout秒,如果timeout=0,一直阻塞等待</span><br></pre></td></tr></table></figure>
</li>
<li><p>List的应用场景</p>
</li>
</ul>
<p><img src="http://blog-image-xiaoqiang.test.upcdn.net/201910/1020-4.jpg" alt=""></p>
<p>这是我们经常使用的新浪微博，我们看在微博文章中如何使用redis的list数据结构。新浪微博是使用redis的大户，据在新浪工作的朋友说，新浪使用redis的总容量超过500T，可想而知几乎70%的功能都在redis中操作。</p>
<p>“小米手机”发微博，消息id为1001，使用的redis命令是： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LPUSH msg：&#123;小强-id&#125; 1001</span><br></pre></td></tr></table></figure>
<p>“号外长沙”发微博，消息id为1002，使用的redis命令是： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LPUSH msg：&#123;小强-id&#125; 1002</span><br></pre></td></tr></table></figure>
<p>小强查看最新10条的新浪微博消息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LRANGE msg：&#123;小强-id&#125; 0 10</span><br></pre></td></tr></table></figure>

<h3 id="Set结构"><a href="#Set结构" class="headerlink" title="Set结构"></a>Set结构</h3><ul>
<li>Set常用操作<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SADD  key  member  [member ...]			//往集合key中存入元素，元素存在则忽略，若key不存在则新建</span><br><span class="line">SREM  key  member  [member ...]			//从集合key中删除元素</span><br><span class="line">SMEMBERS  key					//获取集合key中所有元素</span><br><span class="line">SCARD  key					//获取集合key的元素个数</span><br><span class="line">SISMEMBER  key  member			//判断member元素是否存在于集合key中</span><br><span class="line">SRANDMEMBER  key  [count]			//从集合key中选出count个元素，元素不从key中删除</span><br><span class="line">SPOP  key  [count]				//从集合key中选出count个元素，元素从key中删除</span><br></pre></td></tr></table></figure></li>
<li>Set运算操作<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SINTER  key  [key ...] 				//交集运算</span><br><span class="line">SINTERSTORE  destination  key  [key ..]		//将交集结果存入新集合destination中</span><br><span class="line">SUNION  key  [key ..] 				//并集运算</span><br><span class="line">SUNIONSTORE  destination  key  [key ...]		//将并集结果存入新集合destination中</span><br><span class="line">SDIFF  key  [key ...] 				//差集运算</span><br><span class="line">SDIFFSTORE  destination  key  [key ...]		//将差集结果存入新集合destination中</span><br></pre></td></tr></table></figure></li>
<li>Set使用场景</li>
</ul>
<p><img src="http://blog-image-xiaoqiang.test.upcdn.net/201910/1020-5.jpg" alt=""></p>
<p>使用这个抽奖界面作为set的使用场景的例子，相信大家对这个界面都很熟悉，微信小程序的“抽奖”功能，这个是使用redis的set数据结构的典型场景。<br>当用户点击“参与抽奖”，也就是把将用户ID加入集合中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SADD key &#123;userID&#125;</span><br></pre></td></tr></table></figure>
<p>查看参与抽奖的所有用户：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SMEMBERS key</span><br></pre></td></tr></table></figure>
<p>抽取count名中奖用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SRANDMEMBER key [count]</span><br></pre></td></tr></table></figure>

<h3 id="Zset有序集合结构"><a href="#Zset有序集合结构" class="headerlink" title="Zset有序集合结构"></a>Zset有序集合结构</h3><ul>
<li>ZSet常用操作<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ZADD key score member [[score member]…]	//往有序集合key中加入带分值元素</span><br><span class="line">ZREM key member [member …]		//从有序集合key中删除元素</span><br><span class="line">ZSCORE key member 			//返回有序集合key中元素member的分值</span><br><span class="line">ZINCRBY key increment member		//为有序集合key中元素member的分值加上increment </span><br><span class="line">ZCARD key				//返回有序集合key中元素个数</span><br><span class="line">ZRANGE key start stop [WITHSCORES]	//正序获取有序集合key从start下标到stop下标的元素</span><br><span class="line">ZREVRANGE key start stop [WITHSCORES]	//倒序获取有序集合key从start下标到stop下标的元素</span><br></pre></td></tr></table></figure></li>
<li>Zset使用场景</li>
</ul>
<p><img src="http://blog-image-xiaoqiang.test.upcdn.net/201910/1020-6.jpg" alt=""></p>
<p>微博热搜榜处处使用到了Redis的有序集合这个数据结构，我们都知道有序集合是对集合的一个扩展，增加了score字段。通过score字段，我们可以选出最大或者最小的topN，这样就有了排行榜，如果用传统的数据库去实现这个功能，估计对数据性能的消耗非常大。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1）点击新闻</span><br><span class="line">ZINCRBY  hotNews:20190819  1  乌镇十二时辰</span><br><span class="line">2）展示当日排行前十</span><br><span class="line">ZREVRANGE  hotNews:20190819  0  10  WITHSCORES </span><br><span class="line">3）七日搜索榜单计算</span><br><span class="line">ZUNIONSTORE  hotNews:20190813-20190819  7 </span><br><span class="line">hotNews:20190813  hotNews:20190814... hotNews:20190819</span><br><span class="line">4）展示七日排行前十</span><br><span class="line">ZREVRANGE hotNews:20190813-20190819  0  10  WITHSCORES</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/10/24/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
</search>
